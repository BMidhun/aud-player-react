{"version":3,"sources":["helper/filesAsArray.ts","helper/getRandomTrackNumber.ts","modules/common/footer.tsx","modules/common/menu.tsx","helper/computeDuration.ts","images/audio-icon.png","modules/player/index.tsx","modules/playlist/header.tsx","modules/playlist/track.tsx","modules/playlist/tracklist.tsx","modules/playlist/index.tsx","App.tsx","index.tsx","helper/readMeta.js"],"names":["filesAsArray","filesList","tracks","index","length","push","getRandomTrack","playlistLength","Math","floor","random","Footer","className","href","rel","target","Menu","togglePlaylist","changePlayList","filePickerRef","useRef","htmlFor","onClick","current","click","type","accept","multiple","id","ref","onChange","e","files","computeDuration","duration","time","Date","setHours","setMinutes","setSeconds","toTimeString","split","hours","minutes","seconds","parseInt","Player","currentTrack","hasNext","hasPrev","onNext","onPrevious","shouldRepeat","toggleRepeat","toggleShuffle","shouldShuffle","useState","trackData","setTrackData","currentProgress","setCurrentProgress","isPlaying","setIsPlaying","useEffect","player","audioPlayerRef","setTrackEndToTrue","addEventListener","removeEventListener","progressRef","progressParentRef","changeDuration","currentTime","width","style","onProgressSeek","trackTotalDuration","playPoint","offsetX","clientWidth","toFixed","loop","progress","readMetaData","then","res","undefined","progressParent","src","URL","createObjectURL","setTimeout","play","srcSet","imageSrc","format","data","toString","AlbumCover","alt","albumTitle","artistName","disabled","paused","pause","pauseAudio","playAudio","memo","Header","Track","selectTrackFromPlaylist","parseData","setParsedData","TrackList","playlist","map","file","name","Playlist","openPlaylist","App","setOpenPlaylist","currentTrackIndex","setCurrentTrackIndex","setPlaylist","setShouldRepeat","setShouldShuffle","prev","trackIndex","Boolean","ReactDOM","render","document","getElementById","a","Buffer","arrayBuffer","bufferedData","from","mm","mimeType","metadata","common","picture","title","artist","console","log"],"mappings":"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","file":"static/js/main.8f263d85.chunk.js","sourcesContent":["function filesAsArray(filesList: FileList):File[] {\n  if (filesList) {\n    const tracks = [];\n    for (let index = 0; index < filesList.length; index++) {\n      tracks.push(filesList[index]);\n    }\n\n    return tracks;\n  } else return [];\n}\n\n\nexport default filesAsArray;","function getRandomTrack (playlistLength:number):number {\n        return  Math.floor(Math.random() * playlistLength)\n}\n\nexport default getRandomTrack;","\nfunction Footer() {\n    return (\n        <div className=\"footer\">\n            <p className=\"special-text\">Developed by Midhun Baby</p>\n            <ul className=\"social-list\">\n              <li className=\"social\">\n                <a href=\"https://www.instagram.com/b_midhun/\" rel=\"noreferrer\" target=\"_blank\">\n                 <i className=\"bi bi-instagram\"></i>\n                </a>\n              </li>\n\n              <li className=\"social\">\n                <a href=\"https://github.com/BMidhun\" target=\"_blank\" rel=\"noreferrer\">\n                <i className=\"bi bi-github\"></i>\n                </a>\n              </li>\n            </ul>\n        </div>\n    )\n}\n\nexport default Footer\n","import { useRef } from \"react\";\n\ntype Props = {\n  togglePlaylist: () => void;\n  changePlayList: (fileList:FileList | null) => void ;\n};\n\nfunction Menu({ togglePlaylist, changePlayList }: Props) {\n  const filePickerRef: any = useRef();\n\n  const fetchFileFromDevice = () => {\n    filePickerRef.current.click();\n  };\n\n  const onFilesPick = (e: React.ChangeEvent<HTMLInputElement>) => {\n    changePlayList(e.target.files);\n  };\n\n  return (\n    <div className=\"menu\">\n      <label\n        htmlFor=\"filepPicker\"\n        className=\"btn\"\n        onClick={fetchFileFromDevice}\n      >\n        <input\n          type=\"file\"\n          accept=\"audio/*\"\n          multiple\n          id=\"filePicker\"\n          ref={filePickerRef}\n          onChange={onFilesPick}\n        />\n        <i className=\"bi bi-plus-square\"></i>\n      </label>\n\n      <button type=\"button\" className=\"btn\" onClick={togglePlaylist}>\n        <i className=\"bi bi-music-note-list\"></i>\n      </button>\n    </div>\n  );\n}\n\nexport default Menu;\n","function computeDuration(duration: number): string {\n    let time: any = new Date();\n    // create Date object and set to today's date and time\n    time.setHours((duration / 3600) % 24);\n    time.setMinutes((duration / 60) % 60);\n    time.setSeconds(duration % 60);\n    time = time.toTimeString().split(\" \")[0];\n    const [hours, minutes, seconds]: string[] = time.split(\":\");\n    let res = \"\";\n    if (parseInt(hours)) {\n      res = `${hours}:${minutes}:${seconds}`;\n    } else res = `${minutes}:${seconds}`;\n  \n    return res;\n  }\n\n\nexport default computeDuration;","export default __webpack_public_path__ + \"static/media/audio-icon.e4029d57.png\";","// import moment from \"moment\";\nimport { memo, useEffect, useRef, useState } from \"react\";\nimport computeDuration from \"../../helper/computeDuration\";\n// import jsmediatags from \"../../jsmediatags\";\nimport readMetaData from \"../../helper/readMeta\";\nimport AlbumCover from \"../../images/audio-icon.png\";\n\ntype Props = {\n  currentTrack: File | null;\n  hasPrev: boolean;\n  hasNext: boolean;\n  onPrevious: () => void;\n  onNext: () => void;\n  shouldRepeat : boolean,\n  toggleRepeat : () => void,\n  toggleShuffle : () => void,\n  shouldShuffle:boolean\n};\n\ntype Track = {\n  albumTitle: string | undefined;\n  artistName: string | undefined;\n  imageSrc: any;\n  duration: number | undefined;\n};\n\nfunction Player({ currentTrack, hasNext, hasPrev, onNext, onPrevious , shouldRepeat, toggleRepeat, toggleShuffle, shouldShuffle}: Props) {\n  const [trackData, setTrackData] = useState<Track | undefined>();\n\n  const [currentProgress, setCurrentProgress] = useState(\"\");\n\n  const [isPlaying, setIsPlaying] = useState(false);\n\n  \n  \n  useEffect(() => {\n    const player = audioPlayerRef.current;\n\n    function setTrackEndToTrue(e:any) {\n       onNext();\n    }\n\n    if(player){\n       player.addEventListener('ended', setTrackEndToTrue)\n    }\n\n    return () => {\n      player.removeEventListener('ended', setTrackEndToTrue)\n    }\n  },[onNext])\n\n  \n\n\n  const progressRef: any = useRef();\n\n  const progressParentRef: any = useRef();\n\n  const audioPlayerRef: any = useRef();\n\n  const changeDuration = (e: any) => {\n    const duration = computeDuration(e.target.currentTime);\n    setCurrentProgress(duration);\n    const currentTime = e.target.currentTime;\n    const totalTime = e.target.duration;\n    const width = (currentTime / totalTime) * 100;\n    if (progressRef.current) progressRef.current.style.width = width + \"%\";\n  };\n\n  const playAudio = () => {\n    const player = audioPlayerRef.current;\n    if (player.paused && !isPlaying) {\n      player.play();\n    }\n  };\n\n  function pauseAudio() {\n    const player = audioPlayerRef.current;\n    if (!player.paused && isPlaying) {\n      player.pause();\n    }\n  }\n\n  useEffect(() => {\n    const player = audioPlayerRef.current;\n      player.loop = shouldRepeat\n  }, [shouldRepeat]);\n\n  function onProgressSeek(e: any) {\n    if (progressParentRef.current) {\n      const player = audioPlayerRef.current;\n      const trackTotalDuration = player.duration;\n\n      let playPoint = (\n        e.offsetX / progressParentRef.current.clientWidth\n      ).toFixed(6) as any;\n\n      playPoint = (trackTotalDuration * playPoint).toFixed(6);\n\n      player.currentTime = playPoint;\n    }\n  }\n\n\n  \n\n  \n\n  useEffect(() => {\n    const player = audioPlayerRef.current;\n    const progress = progressRef.current;\n\n    if (currentTrack) {\n      setCurrentProgress(\"00:00\");\n      readMetaData(currentTrack).then((res) => {\n        setTrackData(res);\n      });\n    } else {\n      setTrackData(undefined);\n    }\n\n    return () => {\n      if (player && progress && currentTrack) {\n        setCurrentProgress(\"\");\n        setIsPlaying(false);\n\n        progress.style.width = \"0%\";\n        player.removeEventListener(\"playing\", () => {\n          setIsPlaying(true);\n        });\n        player.removeEventListener(\"pause\", () => {\n          setIsPlaying(false);\n        });\n        player.removeEventListener(\"timeupdate\", changeDuration);\n        progress.removeEventListener(\"click\", onProgressSeek);\n      }\n    };\n    \n  }, [currentTrack]);\n\n  useEffect(() => {\n    const player = audioPlayerRef.current;\n    const progressParent = progressParentRef.current;\n\n    if (trackData && currentTrack) {\n      player.src = URL.createObjectURL(currentTrack);\n\n      player.addEventListener(\"playing\", () => {\n        setIsPlaying(true);\n      });\n      player.addEventListener(\"pause\", () => {\n        setIsPlaying(false);\n      });\n\n      player.addEventListener(\"timeupdate\", changeDuration);\n\n      progressParent.addEventListener(\"click\", onProgressSeek);\n\n      setTimeout(() => {\n        player.play();\n      }, 100);\n    }\n  }, [trackData, currentTrack]);\n\n  return (\n    <div className=\"player\">\n      <audio ref={audioPlayerRef} id=\"audioPlayer\"></audio>\n      <div className=\"track-image-wrap\">\n        <picture className=\"track-image\">\n          <source\n            srcSet={\n              trackData?.imageSrc?.format\n                ? `data:${\n                    trackData.imageSrc.format\n                  };base64,${trackData.imageSrc.data.toString(\"base64\")}`\n                : \"\"\n            }\n          />\n          <img src={AlbumCover} alt=\"albumcover.jpg\"></img>\n        </picture>\n      </div>\n\n      {currentTrack && (\n        <div className=\"track-details text-center\">\n          <h3>{trackData?.albumTitle || \"Album N/A\"}</h3>\n          <p>{trackData?.artistName || \"Artist N/A\"}</p>\n        </div>\n      )}\n\n      {currentTrack && (\n        <div className=\"progress\">\n          <div className=\"progress-bar-wrap\" ref={progressParentRef}>\n            <div className=\"progress-bar\" ref={progressRef}></div>\n          </div>\n\n          {trackData && trackData.duration && (\n            <div className=\"progress-time-wrap\">\n              <span>{currentProgress}</span>\n              <span>{computeDuration(trackData.duration)}</span>\n            </div>\n          )}\n        </div>\n      )}\n\n      {currentTrack && trackData ? (\n        <div className=\"player-controls\">\n          <button\n            type=\"button\"\n            className={`btn ${shouldRepeat && 'btn-active'}`}\n            onClick={toggleRepeat}\n          >\n            <i className=\"bi bi-arrow-repeat\"></i>\n          </button>\n          <button\n            type=\"button\"\n            className=\"btn\"\n            disabled={!hasPrev}\n            onClick={onPrevious}\n          >\n            <i className=\"bi bi-chevron-bar-left\"></i>\n          </button>\n\n          <button\n            type=\"button\"\n            className=\"btn btn--lg btn-play\"\n            onClick={() => {\n              isPlaying ? pauseAudio() : playAudio();\n            }}\n          >\n            {!isPlaying ? (\n              <i className=\"bi bi-play\"></i>\n            ) : (\n              <i className=\"bi bi-pause\"></i>\n            )}\n          </button>\n\n          <button\n            type=\"button\"\n            className=\"btn\"\n            disabled={!hasNext}\n            onClick={onNext}\n          >\n            <i className=\"bi bi-chevron-bar-right\"></i>\n          </button>\n\n          <button \n          type=\"button\" \n          className={`btn ${shouldShuffle && 'btn-active'}`}\n          onClick={toggleShuffle}\n          >\n            <i className=\"bi bi-shuffle\"></i>\n          </button>\n        </div>\n      ) : (\n        <div className=\"text-center\">\n          <h2>Please add tracks to enjoy music</h2>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default memo(Player);\n","type Props = {\n    togglePlaylist : () => void,\n}\n\nfunction Header({togglePlaylist}:Props) {\n    return (\n        <div className=\"menu\">\n        <button\n          className=\"btn\"\n          type=\"button\"\n          onClick={togglePlaylist}\n        >\n          <i className=\"bi bi-chevron-left\"></i>\n        </button>\n\n        <h2>Playlist</h2>\n      </div>\n    )\n}\n\nexport default Header\n","import { IPicture } from \"music-metadata/lib/type\";\nimport { useEffect, useState } from \"react\";\nimport computeDuration from \"../../helper/computeDuration\";\nimport readMetaData from \"../../helper/readMeta\";\nimport AlbumCover from \"../../images/audio-icon.png\";\n\ntype Props = {\n  trackData: File | null;\n  index : number;\n  selectTrackFromPlaylist : (tracknum:number) => void\n\n};\n\ntype TrackType = {\n    albumTitle: string | undefined;\n    artistName: string | undefined;\n    imageSrc: IPicture | undefined;\n    duration: number ;\n  };\n\n\n\nfunction Track({ trackData, index,selectTrackFromPlaylist }: Props) {\n  const [parseData, setParsedData] = useState<TrackType | undefined>(undefined);\n  useEffect(() => {\n    if (trackData) {\n      readMetaData(trackData).then((res: any) => {\n        setParsedData(res);\n      });\n    }\n  }, [trackData]);\n\n  function getTrack () {\n    selectTrackFromPlaylist(index)\n\n  }\n\n  return (\n    <div className=\"playlist-track-wrap\" onClick={getTrack}>\n      <div className=\"playlist-image-wrap\">\n        <picture>\n          <source\n            srcSet={\n              parseData?.imageSrc?.format\n                ? `data:${\n                    parseData?.imageSrc?.format\n                  };base64,${parseData.imageSrc.data.toString(\"base64\")}`\n                : \"\"\n            }\n          />\n          <img src={AlbumCover} alt=\"albumcover.jpg\"></img>\n        </picture>\n      </div>\n      <div className=\"playlist-track-detail\">\n        <h4>{parseData && parseData.albumTitle ? parseData.albumTitle : 'N/A' }</h4>\n        <p>{parseData && parseData.artistName ? parseData.artistName : 'N/A'}</p>\n      </div>\n      \n      <p>{parseData && parseData.duration ? computeDuration(parseData.duration) : 'N/A' }</p>\n    </div>\n  );\n}\n\nexport default Track;\n","import Track from \"./track\";\n\ntype Props = {\n  playlist: File[];\n  selectTrackFromPlaylist : (tracknum:number) => void\n};\n\nexport default function TrackList({ playlist, selectTrackFromPlaylist }: Props) {\n\n  return (\n      playlist.length ? \n      <div className=\"tracklist\">\n         {      playlist.map((file,index) => {\n                   return <Track trackData={file} key={file.name + index} index={index} selectTrackFromPlaylist = {selectTrackFromPlaylist}/>\n                })\n\n            }\n      </div> \n      : \n      <div className=\"no-tracks\"><h2>Please add some tracks</h2></div>\n  )\n}\n","import Header from \"./header\";\nimport TrackList from \"./tracklist\";\n\ntype Props = {\n    openPlaylist : boolean,\n    togglePlaylist : () => void,\n    playlist : File[],\n    selectTrackFromPlaylist : (tracknum:number) => void\n}\n\nfunction Playlist({openPlaylist,togglePlaylist,playlist,selectTrackFromPlaylist}:Props) {\n   \n\n  return (\n    <div className={`playlist playlist-${openPlaylist ? 'show': 'hide'}`} >\n      <Header \n       togglePlaylist={togglePlaylist}\n      />\n      <TrackList \n       playlist = {playlist}\n       selectTrackFromPlaylist = {selectTrackFromPlaylist}\n      />\n    </div>\n  );\n}\n\nexport default Playlist;\n","import { useState } from \"react\";\nimport filesAsArray from \"./helper/filesAsArray\";\nimport getRandomTrack from \"./helper/getRandomTrackNumber\";\nimport Footer from \"./modules/common/footer\";\nimport Menu from \"./modules/common/menu\";\nimport Player from \"./modules/player\";\nimport Playlist from \"./modules/playlist\";\n\nfunction App() {\n  const [openPlaylist, setOpenPlaylist] = useState<boolean>(false);\n  const [currentTrackIndex, setCurrentTrackIndex] = useState<number>(0);\n  const [playlist, setPlaylist] = useState<File[]>([]);\n  const [shouldRepeat, setShouldRepeat] = useState(false);\n  const [shouldShuffle, setShouldShuffle] = useState(false);\n\n  const selectTrackFromPlaylist = (trackIndex:number) => {\n    setOpenPlaylist(false);\n    setCurrentTrackIndex(trackIndex);\n  }\n\n  const showPlaylist = () => {\n    setOpenPlaylist(true);\n  };\n\n  const hidePlaylist = () => {\n    setOpenPlaylist(false);\n  };\n\n  const toggleRepeat = () => {\n    setShouldRepeat((prev) => !prev);\n  };\n\n  const toggleShuffle = () => {\n    setShouldShuffle((prev) => !prev);\n  };\n\n\n  const changePlayList = (filesList: FileList | null) => {\n    if (playlist?.length && filesList?.length) {\n\n      setPlaylist(prev => [...prev,...filesAsArray(filesList)]);\n      return;\n    }\n    if (!playlist.length && filesList?.length) {\n      setPlaylist(filesAsArray(filesList));\n      return;\n    }\n  };\n\n  const onNext = () => {\n    const playlistLength = playlist ? playlist.length : 0;\n\n    if(shouldRepeat)\n        return;\n    if(shouldShuffle) { \n        setCurrentTrackIndex(getRandomTrack(playlistLength));\n        return;\n    } \n\n    if (currentTrackIndex !== playlistLength - 1) {\n      setCurrentTrackIndex((prev) => prev + 1);\n      return\n    }\n  };\n\n  const onPrevious = () => {\n\n    const playlistLength = playlist ? playlist.length : 0;\n\n    if(shouldRepeat)\n    return;\n\n    if(shouldShuffle) { \n      setCurrentTrackIndex(getRandomTrack(playlistLength));\n      return;\n  } \n    if (currentTrackIndex) {\n      setCurrentTrackIndex((prev) => prev - 1);\n      return\n    }\n  };\n\n  return (\n    <div className=\"mobile-layout\">\n      <div className=\"screen\">\n        <Menu togglePlaylist={showPlaylist} changePlayList={changePlayList} />\n        <Playlist\n          openPlaylist={openPlaylist}\n          togglePlaylist={hidePlaylist}\n          playlist={playlist}\n          selectTrackFromPlaylist = {selectTrackFromPlaylist}\n        />\n        <Player\n          currentTrack={playlist ? playlist[currentTrackIndex] : null}\n          hasPrev={Boolean( (currentTrackIndex || shouldShuffle) && !shouldRepeat )}\n          hasNext={Boolean(\n            (currentTrackIndex !== (playlist ? playlist.length - 1 : 0) || shouldShuffle) && !shouldRepeat\n          )}\n          onPrevious={onPrevious}\n          onNext={onNext}\n          shouldRepeat ={shouldRepeat}\n          toggleRepeat={toggleRepeat}\n          toggleShuffle={toggleShuffle}\n          shouldShuffle={shouldShuffle}\n        />\n        {playlist.length === 0 && <Footer /> }\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { StrictMode } from \"react\";\n\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  document.getElementById(\"root\")\n);\n","import * as mm from 'music-metadata/lib/core';\n\nconst readMetaData = async (currentTrack) => {\n  try {\n    const bufferedData = Buffer.from(await currentTrack.arrayBuffer());\n    let metadata = await mm.parseBuffer(bufferedData, {\n      mimeType: currentTrack.type,\n    });\n    if (metadata.common?.picture)\n      metadata.common?.picture?.[0].data.toString('base64');\n    const res = {\n      albumTitle: metadata.common?.title,\n      artistName: metadata.common?.artist,\n      imageSrc:  metadata.common?.picture?.[0],\n      duration : metadata.format?.duration\n    };\n\n    return res;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport default readMetaData\n"],"sourceRoot":""}