{"version":3,"sources":["helper/filesAsArray.ts","helper/getRandomTrackNumber.ts","modules/common/menu.tsx","helper/computeDuration.ts","images/audio-icon.png","modules/player/index.tsx","modules/playlist/header.tsx","modules/playlist/track.tsx","modules/playlist/tracklist.tsx","modules/playlist/index.tsx","App.tsx","index.tsx","helper/readMeta.js"],"names":["filesAsArray","filesList","tracks","index","length","push","getRandomTrack","playlistLength","Math","floor","random","Menu","togglePlaylist","changePlayList","filePickerRef","useRef","className","htmlFor","onClick","current","click","type","accept","multiple","id","ref","onChange","e","target","files","computeDuration","duration","time","Date","setHours","setMinutes","setSeconds","toTimeString","split","hours","minutes","seconds","parseInt","Player","currentTrack","hasNext","hasPrev","onNext","onPrevious","shouldRepeat","toggleRepeat","toggleShuffle","shouldShuffle","useState","trackData","setTrackData","currentProgress","setCurrentProgress","isPlaying","setIsPlaying","useEffect","player","audioPlayerRef","setTrackEndToTrue","addEventListener","removeEventListener","progressRef","progressParentRef","changeDuration","currentTime","width","style","onProgressSeek","trackTotalDuration","playPoint","offsetX","clientWidth","toFixed","loop","progress","readMetaData","then","res","undefined","console","log","progressParent","src","URL","createObjectURL","setTimeout","play","srcSet","imageSrc","format","data","toString","AlbumCover","alt","albumTitle","artistName","disabled","paused","pause","pauseAudio","playAudio","memo","Header","Track","selectTrackFromPlaylist","parseData","setParsedData","TrackList","playlist","map","file","name","Playlist","openPlaylist","App","setOpenPlaylist","currentTrackIndex","setCurrentTrackIndex","setPlaylist","setShouldRepeat","setShouldShuffle","prev","trackIndex","Boolean","ReactDOM","render","document","getElementById","a","Buffer","arrayBuffer","bufferedData","from","mm","mimeType","metadata","common","picture","title","artist"],"mappings":"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","file":"static/js/main.dfbb9380.chunk.js","sourcesContent":["function filesAsArray(filesList: FileList):File[] {\n  if (filesList) {\n    const tracks = [];\n    for (let index = 0; index < filesList.length; index++) {\n      tracks.push(filesList[index]);\n    }\n\n    return tracks;\n  } else return [];\n}\n\n\nexport default filesAsArray;","function getRandomTrack (playlistLength:number):number {\n        return  Math.floor(Math.random() * playlistLength)\n}\n\nexport default getRandomTrack;","import { useRef } from \"react\";\n\ntype Props = {\n  togglePlaylist: () => void;\n  changePlayList: (fileList:FileList | null) => void ;\n};\n\nfunction Menu({ togglePlaylist, changePlayList }: Props) {\n  const filePickerRef: any = useRef();\n\n  const fetchFileFromDevice = () => {\n    filePickerRef.current.click();\n  };\n\n  const onFilesPick = (e: React.ChangeEvent<HTMLInputElement>) => {\n    changePlayList(e.target.files);\n  };\n\n  return (\n    <div className=\"menu\">\n      <label\n        htmlFor=\"filepPicker\"\n        className=\"btn\"\n        onClick={fetchFileFromDevice}\n      >\n        <input\n          type=\"file\"\n          accept=\"audio/*\"\n          multiple\n          id=\"filePicker\"\n          ref={filePickerRef}\n          onChange={onFilesPick}\n        />\n        <i className=\"bi bi-plus-square\"></i>\n      </label>\n\n      <button type=\"button\" className=\"btn\" onClick={togglePlaylist}>\n        <i className=\"bi bi-music-note-list\"></i>\n      </button>\n    </div>\n  );\n}\n\nexport default Menu;\n","function computeDuration(duration: number): string {\n    let time: any = new Date();\n    // create Date object and set to today's date and time\n    time.setHours((duration / 3600) % 24);\n    time.setMinutes((duration / 60) % 60);\n    time.setSeconds(duration % 60);\n    time = time.toTimeString().split(\" \")[0];\n    const [hours, minutes, seconds]: string[] = time.split(\":\");\n    let res = \"\";\n    if (parseInt(hours)) {\n      res = `${hours}:${minutes}:${seconds}`;\n    } else res = `${minutes}:${seconds}`;\n  \n    return res;\n  }\n\n\nexport default computeDuration;","export default __webpack_public_path__ + \"static/media/audio-icon.e4029d57.png\";","// import moment from \"moment\";\nimport { memo, useEffect, useRef, useState } from \"react\";\nimport computeDuration from \"../../helper/computeDuration\";\n// import jsmediatags from \"../../jsmediatags\";\nimport readMetaData from \"../../helper/readMeta\";\nimport AlbumCover from \"../../images/audio-icon.png\";\n\ntype Props = {\n  currentTrack: File | null;\n  hasPrev: boolean;\n  hasNext: boolean;\n  onPrevious: () => void;\n  onNext: () => void;\n  shouldRepeat : boolean,\n  toggleRepeat : () => void,\n  toggleShuffle : () => void,\n  shouldShuffle:boolean\n};\n\ntype Track = {\n  albumTitle: string | undefined;\n  artistName: string | undefined;\n  imageSrc: any;\n  duration: number | undefined;\n};\n\nfunction Player({ currentTrack, hasNext, hasPrev, onNext, onPrevious , shouldRepeat, toggleRepeat, toggleShuffle, shouldShuffle}: Props) {\n  const [trackData, setTrackData] = useState<Track | undefined>();\n\n  const [currentProgress, setCurrentProgress] = useState(\"\");\n\n  const [isPlaying, setIsPlaying] = useState(false);\n\n  \n  \n  useEffect(() => {\n    const player = audioPlayerRef.current;\n\n    function setTrackEndToTrue(e:any) {\n       onNext();\n    }\n\n    if(player){\n       player.addEventListener('ended', setTrackEndToTrue)\n    }\n\n    return () => {\n      player.removeEventListener('ended', setTrackEndToTrue)\n    }\n  },[onNext])\n\n  \n\n\n  const progressRef: any = useRef();\n\n  const progressParentRef: any = useRef();\n\n  const audioPlayerRef: any = useRef();\n\n  const changeDuration = (e: any) => {\n    const duration = computeDuration(e.target.currentTime);\n    setCurrentProgress(duration);\n    const currentTime = e.target.currentTime;\n    const totalTime = e.target.duration;\n    const width = (currentTime / totalTime) * 100;\n    if (progressRef.current) progressRef.current.style.width = width + \"%\";\n  };\n\n  const playAudio = () => {\n    const player = audioPlayerRef.current;\n    if (player.paused && !isPlaying) {\n      player.play();\n    }\n  };\n\n  function pauseAudio() {\n    const player = audioPlayerRef.current;\n    if (!player.paused && isPlaying) {\n      player.pause();\n    }\n  }\n\n  useEffect(() => {\n    const player = audioPlayerRef.current;\n      player.loop = shouldRepeat\n  }, [shouldRepeat]);\n\n  function onProgressSeek(e: any) {\n    if (progressParentRef.current) {\n      const player = audioPlayerRef.current;\n      const trackTotalDuration = player.duration;\n\n      let playPoint = (\n        e.offsetX / progressParentRef.current.clientWidth\n      ).toFixed(6) as any;\n\n      playPoint = (trackTotalDuration * playPoint).toFixed(6);\n\n      player.currentTime = playPoint;\n    }\n  }\n\n\n  \n\n  \n\n  useEffect(() => {\n    const player = audioPlayerRef.current;\n    const progress = progressRef.current;\n\n    if (currentTrack) {\n      setCurrentProgress(\"00:00\");\n      readMetaData(currentTrack).then((res) => {\n        setTrackData(res);\n      });\n    } else {\n      setTrackData(undefined);\n    }\n\n    return () => {\n      if (player && progress && currentTrack) {\n        console.log(\"Reached\");\n        setCurrentProgress(\"\");\n        setIsPlaying(false);\n\n        progress.style.width = \"0%\";\n        player.removeEventListener(\"playing\", () => {\n          setIsPlaying(true);\n        });\n        player.removeEventListener(\"pause\", () => {\n          setIsPlaying(false);\n        });\n        player.removeEventListener(\"timeupdate\", changeDuration);\n        progress.removeEventListener(\"click\", onProgressSeek);\n      }\n    };\n    \n  }, [currentTrack]);\n\n  useEffect(() => {\n    const player = audioPlayerRef.current;\n    const progressParent = progressParentRef.current;\n\n    if (trackData && currentTrack) {\n      player.src = URL.createObjectURL(currentTrack);\n\n      player.addEventListener(\"playing\", () => {\n        setIsPlaying(true);\n      });\n      player.addEventListener(\"pause\", () => {\n        setIsPlaying(false);\n      });\n\n      player.addEventListener(\"timeupdate\", changeDuration);\n\n      progressParent.addEventListener(\"click\", onProgressSeek);\n\n      setTimeout(() => {\n        player.play();\n      }, 100);\n    }\n  }, [trackData, currentTrack]);\n\n  return (\n    <div className=\"player\">\n      <audio ref={audioPlayerRef} id=\"audioPlayer\"></audio>\n      <div className=\"track-image-wrap\">\n        <picture className=\"track-image\">\n          <source\n            srcSet={\n              trackData?.imageSrc?.format\n                ? `data:${\n                    trackData.imageSrc.format\n                  };base64,${trackData.imageSrc.data.toString(\"base64\")}`\n                : \"\"\n            }\n          />\n          <img src={AlbumCover} alt=\"albumcover.jpg\"></img>\n        </picture>\n      </div>\n\n      {currentTrack && (\n        <div className=\"track-details text-center\">\n          <h3>{trackData?.albumTitle || \"Album N/A\"}</h3>\n          <p>{trackData?.artistName || \"Artist N/A\"}</p>\n        </div>\n      )}\n\n      {currentTrack && (\n        <div className=\"progress\">\n          <div className=\"progress-bar-wrap\" ref={progressParentRef}>\n            <div className=\"progress-bar\" ref={progressRef}></div>\n          </div>\n\n          {trackData && trackData.duration && (\n            <div className=\"progress-time-wrap\">\n              <span>{currentProgress}</span>\n              <span>{computeDuration(trackData.duration)}</span>\n            </div>\n          )}\n        </div>\n      )}\n\n      {currentTrack && trackData ? (\n        <div className=\"player-controls\">\n          <button\n            type=\"button\"\n            className={`btn ${shouldRepeat && 'btn-active'}`}\n            onClick={toggleRepeat}\n          >\n            <i className=\"bi bi-arrow-repeat\"></i>\n          </button>\n          <button\n            type=\"button\"\n            className=\"btn\"\n            disabled={!hasPrev}\n            onClick={onPrevious}\n          >\n            <i className=\"bi bi-chevron-bar-left\"></i>\n          </button>\n\n          <button\n            type=\"button\"\n            className=\"btn btn--lg btn-play\"\n            onClick={() => {\n              isPlaying ? pauseAudio() : playAudio();\n            }}\n          >\n            {!isPlaying ? (\n              <i className=\"bi bi-play\"></i>\n            ) : (\n              <i className=\"bi bi-pause\"></i>\n            )}\n          </button>\n\n          <button\n            type=\"button\"\n            className=\"btn\"\n            disabled={!hasNext}\n            onClick={onNext}\n          >\n            <i className=\"bi bi-chevron-bar-right\"></i>\n          </button>\n\n          <button \n          type=\"button\" \n          className={`btn ${shouldShuffle && 'btn-active'}`}\n          onClick={toggleShuffle}\n          >\n            <i className=\"bi bi-shuffle\"></i>\n          </button>\n        </div>\n      ) : (\n        <div className=\"text-center\">\n          <h2>Please add tracks to enjoy music</h2>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default memo(Player);\n","type Props = {\n    togglePlaylist : () => void,\n}\n\nfunction Header({togglePlaylist}:Props) {\n    return (\n        <div className=\"menu\">\n        <button\n          className=\"btn\"\n          type=\"button\"\n          onClick={togglePlaylist}\n        >\n          <i className=\"bi bi-chevron-left\"></i>\n        </button>\n\n        <h2>Playlist</h2>\n      </div>\n    )\n}\n\nexport default Header\n","import { IPicture } from \"music-metadata/lib/type\";\nimport { useEffect, useState } from \"react\";\nimport computeDuration from \"../../helper/computeDuration\";\nimport readMetaData from \"../../helper/readMeta\";\nimport AlbumCover from \"../../images/audio-icon.png\";\n\ntype Props = {\n  trackData: File | null;\n  index : number;\n  selectTrackFromPlaylist : (tracknum:number) => void\n\n};\n\ntype TrackType = {\n    albumTitle: string | undefined;\n    artistName: string | undefined;\n    imageSrc: IPicture | undefined;\n    duration: number ;\n  };\n\n\n\nfunction Track({ trackData, index,selectTrackFromPlaylist }: Props) {\n  const [parseData, setParsedData] = useState<TrackType | undefined>(undefined);\n  useEffect(() => {\n    if (trackData) {\n      readMetaData(trackData).then((res: any) => {\n        setParsedData(res);\n      });\n    }\n  }, [trackData]);\n\n  function getTrack () {\n    selectTrackFromPlaylist(index)\n\n  }\n\n  return (\n    <div className=\"playlist-track-wrap\" onClick={getTrack}>\n      <div className=\"playlist-image-wrap\">\n        <picture>\n          <source\n            srcSet={\n              parseData?.imageSrc?.format\n                ? `data:${\n                    parseData?.imageSrc?.format\n                  };base64,${parseData.imageSrc.data.toString(\"base64\")}`\n                : \"\"\n            }\n          />\n          <img src={AlbumCover} alt=\"albumcover.jpg\"></img>\n        </picture>\n      </div>\n      <div className=\"playlist-track-detail\">\n        <h4>{parseData && parseData.albumTitle ? parseData.albumTitle : 'N/A' }</h4>\n        <p>{parseData && parseData.artistName ? parseData.artistName : 'N/A'}</p>\n      </div>\n      \n      <p>{parseData && parseData.duration ? computeDuration(parseData.duration) : 'N/A' }</p>\n    </div>\n  );\n}\n\nexport default Track;\n","import Track from \"./track\";\n\ntype Props = {\n  playlist: File[];\n  selectTrackFromPlaylist : (tracknum:number) => void\n};\n\nexport default function TrackList({ playlist, selectTrackFromPlaylist }: Props) {\n\n  return (\n      playlist.length ? \n      <div className=\"tracklist\">\n         {      playlist.map((file,index) => {\n                   return <Track trackData={file} key={file.name + index} index={index} selectTrackFromPlaylist = {selectTrackFromPlaylist}/>\n                })\n\n            }\n      </div> \n      : \n      <div className=\"no-tracks\"><h2>Please add some tracks</h2></div>\n  )\n}\n","import Header from \"./header\";\nimport TrackList from \"./tracklist\";\n\ntype Props = {\n    openPlaylist : boolean,\n    togglePlaylist : () => void,\n    playlist : File[],\n    selectTrackFromPlaylist : (tracknum:number) => void\n}\n\nfunction Playlist({openPlaylist,togglePlaylist,playlist,selectTrackFromPlaylist}:Props) {\n   \n\n  return (\n    <div className={`playlist playlist-${openPlaylist ? 'show': 'hide'}`} >\n      <Header \n       togglePlaylist={togglePlaylist}\n      />\n      <TrackList \n       playlist = {playlist}\n       selectTrackFromPlaylist = {selectTrackFromPlaylist}\n      />\n    </div>\n  );\n}\n\nexport default Playlist;\n","import { useEffect, useState } from \"react\";\nimport filesAsArray from \"./helper/filesAsArray\";\nimport getRandomTrack from \"./helper/getRandomTrackNumber\";\nimport Menu from \"./modules/common/menu\";\nimport Player from \"./modules/player\";\nimport Playlist from \"./modules/playlist\";\n\nfunction App() {\n  const [openPlaylist, setOpenPlaylist] = useState<boolean>(false);\n  const [currentTrackIndex, setCurrentTrackIndex] = useState<number>(0);\n  const [playlist, setPlaylist] = useState<File[]>([]);\n  const [shouldRepeat, setShouldRepeat] = useState(false);\n  const [shouldShuffle, setShouldShuffle] = useState(false);\n\n  const selectTrackFromPlaylist = (trackIndex:number) => {\n    setOpenPlaylist(false);\n    setCurrentTrackIndex(trackIndex);\n  }\n\n  const showPlaylist = () => {\n    setOpenPlaylist(true);\n  };\n\n  const hidePlaylist = () => {\n    setOpenPlaylist(false);\n  };\n\n  const toggleRepeat = () => {\n    setShouldRepeat((prev) => !prev);\n  };\n\n  const toggleShuffle = () => {\n    setShouldShuffle((prev) => !prev);\n  };\n\n  useEffect(() => {\n    \n    console.log(\"shouldShuffle:\",shouldShuffle)\n  }, [shouldShuffle])\n\n  const changePlayList = (filesList: FileList | null) => {\n    if (playlist?.length && filesList?.length) {\n\n      setPlaylist(prev => [...prev,...filesAsArray(filesList)]);\n      return;\n    }\n    if (!playlist.length && filesList?.length) {\n      setPlaylist(filesAsArray(filesList));\n      return;\n    }\n  };\n\n  const onNext = () => {\n    const playlistLength = playlist ? playlist.length : 0;\n\n    if(shouldRepeat)\n        return;\n    if(shouldShuffle) { \n        setCurrentTrackIndex(getRandomTrack(playlistLength));\n        return;\n    } \n\n    if (currentTrackIndex !== playlistLength - 1) {\n      setCurrentTrackIndex((prev) => prev + 1);\n      return\n    }\n  };\n\n  const onPrevious = () => {\n\n    const playlistLength = playlist ? playlist.length : 0;\n\n    if(shouldRepeat)\n    return;\n\n    if(shouldShuffle) { \n      setCurrentTrackIndex(getRandomTrack(playlistLength));\n      return;\n  } \n    if (currentTrackIndex) {\n      setCurrentTrackIndex((prev) => prev - 1);\n      return\n    }\n  };\n\n  return (\n    <div className=\"mobile-layout\">\n      <div className=\"screen\">\n        <Menu togglePlaylist={showPlaylist} changePlayList={changePlayList} />\n        <Playlist\n          openPlaylist={openPlaylist}\n          togglePlaylist={hidePlaylist}\n          playlist={playlist}\n          selectTrackFromPlaylist = {selectTrackFromPlaylist}\n        />\n        <Player\n          currentTrack={playlist ? playlist[currentTrackIndex] : null}\n          hasPrev={Boolean( (currentTrackIndex || shouldShuffle) && !shouldRepeat )}\n          hasNext={Boolean(\n            (currentTrackIndex !== (playlist ? playlist.length - 1 : 0) || shouldShuffle) && !shouldRepeat\n          )}\n          onPrevious={onPrevious}\n          onNext={onNext}\n          shouldRepeat ={shouldRepeat}\n          toggleRepeat={toggleRepeat}\n          toggleShuffle={toggleShuffle}\n          shouldShuffle={shouldShuffle}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { StrictMode } from \"react\";\n\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  document.getElementById(\"root\")\n);\n","import * as mm from 'music-metadata/lib/core';\n\nconst readMetaData = async (currentTrack) => {\n  try {\n    const bufferedData = Buffer.from(await currentTrack.arrayBuffer());\n    let metadata = await mm.parseBuffer(bufferedData, {\n      mimeType: currentTrack.type,\n    });\n    console.log(metadata)\n    if (metadata.common?.picture)\n      metadata.common?.picture?.[0].data.toString('base64');\n    const res = {\n      albumTitle: metadata.common?.title,\n      artistName: metadata.common?.artist,\n      imageSrc:  metadata.common?.picture?.[0],\n      duration : metadata.format?.duration\n    };\n\n    return res;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport default readMetaData\n"],"sourceRoot":""}